{"ast":null,"code":"import _defineProperty from \"/home/skyraider/Projects/React/trenders/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existingItem) {\n    return cartItems.map(cartItem => {\n      ca;\n    });\n  }\n\n  return [...cartItems, _objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })];\n}; //({\n//   cartItem.id === cartItemToAdd.id ? { ...cartItem, quantity: cartItem.quantity++ } : cartItem;\n// })","map":{"version":3,"sources":["/home/skyraider/Projects/React/trenders/src/redux/cart/cart.util.jsx"],"names":["addItemToCart","cartItems","cartItemToAdd","existingItem","find","cartItem","id","map","ca","quantity"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACzD,QAAMC,YAAY,GAAGF,SAAS,CAACG,IAAV,CACnBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADvB,CAArB;;AAGA,MAAIH,YAAJ,EAAkB;AAChB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAAI;AAAEG,MAAAA,EAAE;AAAC,KAA/B,CAAP;AACD;;AACD,SAAO,CAAC,GAAGP,SAAJ,oBAAoBC,aAApB;AAAmCO,IAAAA,QAAQ,EAAE;AAA7C,KAAP;AACD,CARM,C,CASP;AACA;AACA","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingItem = cartItems.find(\n    cartItem => cartItem.id === cartItemToAdd.id\n  );\n  if (existingItem) {\n    return cartItems.map(cartItem => { ca});\n  }\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n};\n//({\n//   cartItem.id === cartItemToAdd.id ? { ...cartItem, quantity: cartItem.quantity++ } : cartItem;\n// })"]},"metadata":{},"sourceType":"module"}